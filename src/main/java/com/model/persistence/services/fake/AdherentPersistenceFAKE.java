/*
 * Created on 5 oct. 2013 ( Time 18:01:34 )
 * Generated by Telosys Tools Generator ( version 2.0.6 )
 */
package com.model.persistence.services.fake;

import java.util.List;
import java.util.Map;

import com.model.bean.Adherent ;
import com.model.persistence.commons.fake.GenericFakeService;
import com.model.persistence.services.AdherentPersistence;

/**
 * Fake persistence service implementation ( entity "Adherent" )
 *
 * @author Telosys Tools Generator
 */
public class AdherentPersistenceFAKE extends GenericFakeService<Adherent> implements AdherentPersistence {

	public AdherentPersistenceFAKE () {
		super(Adherent.class);
	}
	
	protected Adherent buildEntity(int index) {
		Adherent entity = new Adherent();
		// Init fields with mock values
		entity.setAdId( nextInteger() ) ;
		entity.setAdLogin( nextString() ) ;
		entity.setAdPassword( nextString() ) ;
		entity.setAdNom( nextString() ) ;
		entity.setAdPrenom( nextString() ) ;
		entity.setAdAdresse( nextString() ) ;
		entity.setAdCodepostal( nextString() ) ;
		entity.setAdVille( nextString() ) ;
		return entity ;
	}
	
	
	public boolean delete(Adherent entity) {
		log("delete ( Adherent : " + entity + ")" ) ;
		return true;
	}

	public boolean delete( int adId ) {
		log("delete ( PK )") ;
		return true;
	}

	public void insert(Adherent entity) {
		log("insert ( Adherent : " + entity + ")" ) ;
	}

	public Adherent load( int adId ) {
		log("load ( PK )") ;
		return buildEntity(1) ; 
	}

	public List<Adherent> loadAll() {
		log("loadAll()") ;
		return buildList(40) ;
	}

	public List<Adherent> loadByNamedQuery(String queryName) {
		log("loadByNamedQuery ( '" + queryName + "' )") ;
		return buildList(20) ;
	}

	public List<Adherent> loadByNamedQuery(String queryName, Map<String, Object> queryParameters) {
		log("loadByNamedQuery ( '" + queryName + "', parameters )") ;
		return buildList(10) ;
	}

	public Adherent save(Adherent entity) {
		log("insert ( Adherent : " + entity + ")" ) ;
		return entity;
	}

	public List<Adherent> search(Map<String, Object> criteria) {
		log("search (criteria)" ) ;
		return buildList(15) ;
	}

}
